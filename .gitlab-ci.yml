# Complete Golang CI/CD pipeline with GitLab CI/CD
image: docker:25.0.3

stages:
  - tag
  - release
  - deploy

variables:
  APP_NAME: "agent-server"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - changes:
        - postman/
        - README.md
        - .gitignore
        - code-of-conduct.md
        - docker-compose.yaml
        - docs/
        - database/postgres-init-user-db.sh
      when: never
    - changes:
        - internal/
        - pkg/
        - chart/
        - cmd/
        - Dockerfile.goreleaser
        - go.mod
        - go.sum
        - goreleaser.yaml
        - .golangci.yaml
        - .gitlab-ci.yml
        - tests/
      when: always
 
tag:
  stage: tag
  image: caarlos0/svu:v2.0.1
  script:
    - git config --global user.email "opsscript.deploy@cloudscript.com.br"
    - git config --global user.name "opsscript.deploy"
    - git tag $(svu patch)
    - 'git push "https://opsscript.deploy:${GITLAB_TOKEN}@${CI_SERVER_HOST}/agentscript/agent-server.git" --tags'
  only:
    - /^(main)$/
  tags:
    - shared

release:
  stage: release
  image: goreleaser/goreleaser:v2.9.0
  services:
    - docker:25.0.3-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    GITLAB_TOKEN: $GITLAB_TOKEN
    GOPRIVATE: $GOPRIVATE
  before_script:
    - until docker info; do sleep 1; done
    - go env -w GOPRIVATE=$GOPRIVATE
    - git config --global user.email "opsscript.deploy@cloudscript.com.br"
    - git config --global user.name "opsscript.deploy"
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/".insteadOf "https://${CI_SERVER_HOST}/"
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - goreleaser release --clean
  only:
    - tags
  tags:
    - shared

deploy:
  stage: deploy
  image: argoproj/argocd
  only:
    - tags
  when: manual
  tags:
    - shared
  variables:
    NAMESPACE: "agentscript-production"
    ARGOCD_APP_REPO: git@gitlab.cloudscript.com.br:agentscript/agent-server.git
    ARGOCD_SERVER_URL: "argocd.foundation.management.kubescript.io"
    ARGOCD_CLUSTER: "aws-foundation-platform-engineer-management-us-east-1-main"
    ARGOCD_PROJECT: "aws-cloudscript-technology-agentscript-production-us-east-1-main-apps"
  script:
    - echo "Iniciando o Deploy no ArgoCD..."
    - >
      argocd app create $APP_NAME \
        --auth-token $ARGOCD_AUTH_TOKEN_PRD \
        --dest-namespace $NAMESPACE \
        --dest-name $ARGOCD_CLUSTER \
        --helm-set application.api.image.tag="$CI_COMMIT_TAG" \
        --path chart \
        --project $ARGOCD_PROJECT \
        --repo $ARGOCD_APP_REPO \
        --server $ARGOCD_SERVER_URL \
        --self-heal \
        --auto-prune \
        --sync-policy automated \
        --sync-option Prune=true \
        --sync-option SelfHeal=true \
        --sync-option CreateNamespace=true \
        --upsert \
        --grpc-web \
        --revision "$CI_COMMIT_REF_NAME" \
        --values values.yaml
    - >
      argocd app sync $APP_NAME \
        --auth-token $ARGOCD_AUTH_TOKEN_PRD \
        --server $ARGOCD_SERVER_URL \
        --async \
        --force \
        --prune \
        --retry-limit 3 \
        --timeout 300 \
        --grpc-web